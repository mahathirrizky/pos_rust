//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.16

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "employees")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub first_name: String,
    pub last_name: String,
    #[sea_orm(unique)]
    pub email: String,
    pub phone: Option<String>,
    pub store_id: Option<i32>,
    pub role: String,
    pub password_hash: String,
    pub photo_url: Option<String>,
    pub created_at: DateTimeUtc,
    pub updated_at: DateTimeUtc,
    pub role_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::orders::Entity")]
    Orders,
    #[sea_orm(has_many = "super::purchase_orders::Entity")]
    PurchaseOrders,
    #[sea_orm(has_many = "super::refunds::Entity")]
    Refunds,
    #[sea_orm(
        belongs_to = "super::roles::Entity",
        from = "Column::RoleId",
        to = "super::roles::Column::Id",
        on_update = "Cascade",
        on_delete = "Restrict"
    )]
    Roles,
    #[sea_orm(
        belongs_to = "super::stores::Entity",
        from = "Column::StoreId",
        to = "super::stores::Column::Id",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    Stores,
}

impl Related<super::orders::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Orders.def()
    }
}

impl Related<super::purchase_orders::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PurchaseOrders.def()
    }
}

impl Related<super::refunds::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Refunds.def()
    }
}

impl Related<super::roles::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Roles.def()
    }
}

impl Related<super::stores::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Stores.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Debug, Deserialize, Serialize)]
pub struct CreateEmployee {
    pub first_name: String,
    pub last_name: String,
    pub email: String,
    pub phone: Option<String>,
    pub store_id: Option<i32>,
    pub role_id: i32,
    pub photo_url: Option<String>,
}

#[derive(Debug, Deserialize, Serialize, Default)]
pub struct UpdateEmployee {
    pub first_name: Option<String>,
    pub last_name: Option<String>,
    pub email: Option<String>,
    pub phone: Option<String>,
    pub store_id: Option<i32>,
    pub role_id: Option<i32>,
    pub password: Option<String>,
    pub photo_url: Option<String>,
}

#[derive(Debug, Deserialize, Serialize)]
pub struct CreateAdminPayload {
    pub first_name: String,
    pub last_name: String,
    pub email: String,
    pub phone: Option<String>,
    pub store_id: Option<i32>,
    pub photo_url: Option<String>,
}

#[derive(Debug, Serialize)]
pub struct EmployeeResponse {
    pub id: i32,
    pub first_name: String,
    pub last_name: String,
    pub email: String,
    pub phone: Option<String>,
    pub store_id: Option<i32>,
    pub role: String,
    pub role_id: i32,
    pub photo_url: Option<String>,
    pub created_at: DateTimeUtc,
}

impl From<Model> for EmployeeResponse {
    fn from(employee: Model) -> Self {
        EmployeeResponse {
            id: employee.id,
            first_name: employee.first_name,
            last_name: employee.last_name,
            email: employee.email,
            phone: employee.phone,
            store_id: employee.store_id,
            role: employee.role,
            role_id: employee.role_id,
            photo_url: employee.photo_url,
            created_at: employee.created_at,
        }
    }
}

#[derive(Debug, Serialize)]
pub struct EmployeeReportData {
    pub id: i32,
    pub first_name: String,
    pub last_name: String,
    pub email: String,
    pub role: String,
    pub store_id: Option<i32>,
}

impl From<Model> for EmployeeReportData {
    fn from(employee: Model) -> Self {
        EmployeeReportData {
            id: employee.id,
            first_name: employee.first_name,
            last_name: employee.last_name,
            email: employee.email,
            role: employee.role,
            store_id: employee.store_id,
        }
    }
}
